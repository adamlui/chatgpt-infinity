window.dom={addRisingParticles(targetNode,{lightScheme="gray",darkScheme="white"}={}){if(!targetNode.querySelector("[id*=particles]")){let particlesDivsWrapper=document.createElement("div");particlesDivsWrapper.style.cssText="position: absolute ; top: 0 ; left: 0 ;height: 100% ; width: 100% ; border-radius: 15px ; overflow: clip ;z-index: -1",["sm","med","lg"].forEach(particleSize=>{var particlesDiv=document.createElement("div");particlesDiv.id=config?.bgAnimationsDisabled?`particles-${particleSize}-off`:`${"dark"==(env?.ui?.scheme||env?.ui?.app?.scheme)?darkScheme:lightScheme}-particles-`+particleSize,particlesDivsWrapper.append(particlesDiv)}),targetNode.prepend(particlesDivsWrapper)}},create:{anchor(linkHref,displayContent,attrs={}){let anchor=document.createElement("a"),defaultAttrs={href:linkHref,target:"_blank",rel:"noopener"},finalAttrs={...defaultAttrs,...attrs};return Object.entries(finalAttrs).forEach(([attr,value])=>anchor.setAttribute(attr,value)),displayContent&&anchor.append(displayContent),anchor},elem(elemType,attrs={}){var attr,elem=document.createElement(elemType);for(attr in attrs)elem.setAttribute(attr,attrs[attr]);return elem},style(content,attrs={}){var attr,style=document.createElement("style");for(attr in style.setAttribute("type","text/css"),attrs)style.setAttribute(attr,attrs[attr]);return content&&(style.textContent=content),style},svgElem(type,attrs={}){var attr,elem=document.createElementNS("http://www.w3.org/2000/svg",type);for(attr in attrs)elem.setAttributeNS(null,attr,attrs[attr]);return elem}},cssSelectorize(classList){return classList.toString().replace(/([:[\]\\])/g,"\\$1").replace(/^| /g,".")},get:{computedSize(elems,{dimension}={}){(elems=elems instanceof NodeList?[...elems]:[].concat(elems)).forEach(elem=>{if(!(elem instanceof Node))throw new Error(`Invalid elem: Element "${JSON.stringify(elem)}" is not a valid DOM node`)});let validDimensions=["width","height"],dimensionsToCompute=[].concat(dimension||validDimensions),computedDimensions=(dimensionsToCompute.forEach(dimension=>{if(!validDimensions.includes(dimension))throw new Error("Invalid dimension: Use 'width' or 'height'")}),{width:0,height:0});return elems.forEach(elem=>{let elemStyle=getComputedStyle(elem);"none"!=elemStyle.display&&Object.keys(computedDimensions).forEach(dimension=>{dimensionsToCompute.includes(dimension)&&(computedDimensions[dimension]+=elem.getBoundingClientRect()[dimension]+parseFloat(elemStyle["margin"+("width"==dimension?"Left":"Top")])+parseFloat(elemStyle["margin"+("width"==dimension?"Right":"Bottom")]))})}),1<dimensionsToCompute.length?computedDimensions:computedDimensions[dimensionsToCompute[0]]},computedHeight(elems){return this.computedSize(elems,{dimension:"height"})},computedWidth(elems){return this.computedSize(elems,{dimension:"width"})},loadedElem(selector,{timeout=null}={}){var raceEntries=[new Promise(resolve=>{var elem=document.querySelector(selector);elem?resolve(elem):new MutationObserver((_,obs)=>{var elem=document.querySelector(selector);elem&&(obs.disconnect(),resolve(elem))}).observe(document.documentElement,{childList:!0,subtree:!0})})];return timeout&&raceEntries.push(new Promise(resolve=>setTimeout(()=>resolve(null),timeout))),Promise.race(raceEntries)}}};